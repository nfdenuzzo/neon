(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c935b"],{"57be":function(e,n,i){"use strict";i.r(n);var t=function(){var e=this,n=e.$createElement,i=e._self._c||n;return i("neon-card",[i("neon-card-header",[i("h1",{staticClass:"neon-h3"},[e._v("Responsiveness")])]),i("neon-card-body",[i("neon-anchor",{attrs:{id:"breakpoints"}}),i("h2",{staticClass:"neon-h4"},[e._v("Breakpoints")]),i("p",[e._v(" Neon comes with a predefined set of breakpoints both in SASS and Typescript. Breakpoints are defined in both directions e.g. "),i("em",[e._v("tablet")]),e._v(" and "),i("em",[e._v("larger-than-tablet")]),e._v(". ")]),i("p",[e._v("Here are the defined breakpoints:")]),i("ul",[i("li",[e._v("mobile (max-width: 414px)")]),i("li",[e._v("larger-than-mobile (min-width: 415px)")]),i("li",[e._v("mobile-large (max-width: 599px)")]),i("li",[e._v("larger-than-mobile-large (min-width: 600px)")]),i("li",[e._v("tablet (max-width: 1024px)")]),i("li",[e._v("larger-than-tablet (min-width: 1025px)")]),i("li",[e._v("desktop (max-width: 1439px)")]),i("li",[e._v("desktop-large (min-width: 1440px)")])])],1),i("neon-card-body",[i("neon-anchor",{attrs:{id:"sass-mixins"}}),i("h2",{staticClass:"neon-h4"},[e._v("SASS Mixins")]),i("p",[e._v("A SASS mixin "),i("strong",[e._v("responsive(breakpoint)")]),e._v(" is provided for convenience, e.g.")]),i("editor",{attrs:{value:e.sassExample,"read-only":!0,language:"scss"}})],1),i("neon-card-body",[i("neon-anchor",{attrs:{id:"typescript"}}),i("h2",{staticClass:"neon-h4"},[e._v("Typescript")]),i("p",[i("neon-link",{attrs:{href:"/utils/NeonResponsiveUtils"}},[e._v("NeonResponsiveUtils")]),e._v(" also defines the same breakpoints for use in Typescript/Javascript. ")],1),i("p",[e._v(" Using SASS breakpoints should be preferred, however sometimes this is not enough. Use NeonResponsiveUtils.breakpoints in combination with a window resize listener to manage changes in the responsive breakpoints, e.g. ")]),i("editor",{attrs:{value:e.typescriptExample,"read-only":!0,language:"typescript"}})],1),i("neon-card-body",[i("neon-anchor",{attrs:{id:"page-content"}}),i("h2",{staticClass:"neon-h4"},[e._v("Page content")]),i("p",[e._v(" Neon's approach to page content layout is to use CSS Grid via the "),i("neon-link",{attrs:{href:"/layout/grid"}},[e._v("NeonGrid")]),e._v(" component. "),i("neon-link",{attrs:{href:"/layout/grid"}},[e._v("NeonGrid")]),e._v(" is a CSS Grid based container designed to help simplify page application layout and responsiveness by abstracting CSS Grid and allowing applications to define this programmatically in Typescript. ")],1),i("p",[e._v(" This provides developers with the benefits of using CSS Grid without dealing with the steep learning curve and complexities of using it directly. ")])],1)],1)},a=[],s=i("276c"),o=i("920b"),r=i("92a6"),p=i("9ab4"),d=i("60a3"),l=i("7994"),h=i("c9e5"),c=function(e){Object(o["a"])(i,e);var n=Object(r["a"])(i);function i(){var e;return Object(s["a"])(this,i),e=n.apply(this,arguments),e.sassExample="@import '~@aotearoan/neon/themes/classic/theme';\n\n@include responsive(larger-than-tablet) {\n  // add desired larger-than-tablet responsive styling here\n}",e.typescriptExample="private responsiveView = false;\n\nprivate mounted() {\n  window.addEventListener('resize', this.handleResize, { passive: true });\n  this.handleResize();\n}\n\nprivate beforeDestroy() {\n  window.removeEventListener('resize', this.handleResize);\n}\n\nprivate handleResize() {\n  this.responsiveView = window.matchMedia(NeonResponsiveUtils.breakpoints[NeonResponsive.MobileLarge]).matches;\n}",e}return i}(d["c"]);c=Object(p["a"])([Object(d["a"])({components:{NeonAnchor:l["d"],NeonCard:l["g"],NeonCardHeader:l["i"],NeonCardBody:l["h"],NeonLink:l["A"],Editor:h["a"]}})],c);var v=c,b=v,m=i("2877"),g=Object(m["a"])(b,t,a,!1,null,null,null);n["default"]=g.exports}}]);