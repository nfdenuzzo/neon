(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d221fa9"],{cd3e:function(e,n,a){"use strict";a.r(n);var t=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("neon-card",[a("neon-card-header",[a("h1",{staticClass:"neon-h3"},[e._v("Accessibility")])]),a("neon-card-body",[a("p",[e._v(" As much as possible Neon tries to use semantic HTML for creating components. This means most interactive components are implicitly accessible. Where semantic HTML is either not possible or unavailable Neon supports ARIA keyboard accessibility as well as the relevant ARIA roles and attributes on each component. ")]),a("p",[e._v(" Please see individual component examples and APIs to see how they behave. Also the source code in GitHub can provide more about specific implementation details. ")])])],1)},o=[],s=a("276c"),i=a("920b"),c=a("92a6"),r=a("9ab4"),l=a("60a3"),p=a("7994"),d=function(e){Object(i["a"])(a,e);var n=Object(c["a"])(a);function a(){return Object(s["a"])(this,a),n.apply(this,arguments)}return a}(l["c"]);d=Object(r["a"])([Object(l["a"])({components:{NeonCard:p["g"],NeonCardHeader:p["i"],NeonCardBody:p["h"],NeonLink:p["A"],NeonNote:p["F"]}})],d);var u=d,b=u,h=a("2877"),m=Object(h["a"])(b,t,o,!1,null,null,null);n["default"]=m.exports}}]);